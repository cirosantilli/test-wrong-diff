#!/bin/bash
#set -x
trap "exit 1" SIGINT SIGHUP SIGTERM

export LANGUAGE="C"
export LC_ALL="C"
export LC_COLLATE="C"
export LC_CTYPE="en_US.UTF-8"
export LC_TIME="C"
export LANG="C"

INITDIR=boot-images/initrd
PKGDIR=boot-images/pkg-packages
DEVDIR=./packages/base/dev
MODDIR=boot-images/module-packages
PACDIR=./tmp-tree/packages
MAXIMAGE=786432
TOOLSDIR=./utils/tools
KERNEL_PARAMETERS=""
CONFDIR=./conf
export TOOLSDIR

libutil="chain complex cptime display fancyhello hdt ifcpu \
         keytest libmenu menu prdhcp pxechn rosh simple test \
         test2 vesamenu"

libcom32="chain cmd complex config display elf ethersel gfxboot \
          gpxecmd hdt hexdump host ifcpu ifcpu64 ifmemdsk ifplop \
          kbdmap kontron_wdt libmenu linux localboot lua mboot \
          pcitest pmload prdhcp pxechn reboot rosh sanboot sdi \
          simple sysdump test test2 vesamenu whichsys"

libmenu="complex display hdt simple test test2"

libgpl="cpuidtest disk dmitest hdt ifcpu lua vpdtest zzjson"

liblua="lua"

. packages/base/etc/thinstation.functions
. packages/base/etc/thinstation.env
. packages/base/etc/thinstation.defaults
. thinstation.conf.buildtime
export -f is_enabled

PATH=/usr/local/bin:/usr/bin:/bin:/sbin:/usr/sbin:/usr/local/sbin:/ts/bin

# set some defaults for builds that would produce unexpected results for legacy build scripts otherwise.
ts_mesa_3d=enabled
ts_localpkgs=true

# Show Command line Parameters

showhelp()
{
	echo "--license ACCEPT      Accept all licenses automatically"
	echo "--help                Show help then exit"
	echo "--autodl              Download all commercial addins automatically"
	echo "--buildtime FILENAME  Add buildtime conf file to squashfs image and build boot images only"
	echo "--kernel VERSION      Use this version of the kernel (rather than the default)"
	echo "--noimages            Build process but don't generate boot images"
	echo "--regenconf           Copy over default config example files again"
	echo "--removeall           Remove all commercial binaries then exit"
	echo "--savedir             Saves the tmp-tree directory for debugging and development purposes"
	echo "--savepkglist         Saves the package list files for documentation purposes"
	echo "--update              Will run all package update scripts <package>/build/update"
	echo "--allmodules          Will install all available kernel modules into the image"
}

## Remove Temp files

unmount_tmp()
{
	sleep 3
	if mounted ./tmp-tree/proc; then
		umount -f ./tmp-tree/proc
	fi
	if mounted ./tmp-tree/dev; then
		umount -f ./tmp-tree/dev
	fi
}

remove_files()
{
#	But only if we don't want to save them for debugging
	if [ -z "$SAVEDIR" ]; then
		if [ -e ./temp-efi ]; then
			rmdir ./temp-efi
		fi
		if [ -e /tmp/syslinux-com32 ]; then
			rm /tmp/syslinux-com32
		fi
		if [ -e ./tmp-tree ] ; then
			unmount_tmp
			rm -Rf ./tmp-tree/*
			rmdir ./tmp-tree
		fi
		if [ -e ./fastboot-tmp ] ;then
			rm -rf ./fastboot-tmp
		fi
    \#*|"") continue
	    ;;
    param)
	echo "Parameter: $name"
	echo "ts_$name=$args" >> $PACDIR/$name.param
	;;
    package)
	echo "Package: $name"
	if [ -d ./packages/$name ]; then
	   echo "cp -Rp --remove-destination ./packages/$name/* ./tmp-tree > /dev/null 2>&1">>\
	     $PACDIR/$name.package
	else
	   echo "Not Found $name!!"
	fi
	;;
    machine)
	read_conf ./machine/$name/module.list
	if [ -e ./machine/$name/firmware.list ]; then
		read_conf ./machine/$name/firmware.list
	fi
	if [ -e ./machine/$name/param.list ]; then
		read_conf ./machine/$name/param.list
	fi
	if [ -e ./machine/$name/package.list ]; then
		read_conf ./machine/$name/package.list
	fi
	if [ -e ./machine/$name/etc ]; then
		cp -rf ./machine/$name/etc ./tmp-tree/.
	fi
	;;
    module)
	if ! is_enabled $ALLMODULES; then
		if [ -e ./kernel/alias/$name ] ; then
			name=`cat ./kernel/alias/$name`
		fi
		for KERNVER in $KERNVERS; do
		        if [ -e `find /lib/modules/$KERNVER -name ${name}.ko` ] ; then
				echo "Module $KERNVER: $name"
				copy_module ${name}.ko $KERNVER ./tmp-tree
			else
				echo "Error, Module $name not found"
			fi
		done
	fi
	if [ `make_caps X$args` == "XFORCE" ]; then
		echo $name >> ./tmp-tree/etc/modules
	fi
