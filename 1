						if	[ ! -e $PACDIR/$name.package ] && \
							[ ! -e $PACDIR/$name.pkg ]; then
							if	[ -e $PACDIR/$cross.package ] || \
								[ -e $PACDIR/$cross.pkg ] || \
								[ -z "$cross" ]; then
								if ! is_enabled $DISPLAYED; then
									echo "Adding dependent packages of $package:"
									DISPLAYED=TRUE
								fi
								echo "                              package $name"
								echo "cp -Rp --remove-destination ./packages/$name/* ./tmp-tree > /dev/null 2>&1">>\
									$PACDIR/$name.package
								echo $name.package >> packages.added
								touch /tmp/dirty
							fi
						fi
					elif [ "$1" = "pkg" ] ; then
						if	[ ! -e $PACDIR/$name.package ] && \
							[ ! -e $PACDIR/$name.pkg ]; then
							if	[ -e $PACDIR/$cross.package ] || \
								[ -e $PACDIR/$cross.pkg ] || \
								[ -z "$cross" ]; then
								if ! is_enabled $DISPLAYED; then
									echo "Adding Dependent Pkgs of $package:"
									DISPLAYED=TRUE
								fi
								echo "                         pkg $name"
								echo -e "cp -Rp --remove-destination ./packages/$name $PKGDIR" >>\
									$PACDIR/$name.pkg
								echo $name.pkg >> packages.added
								touch /tmp/dirty
							fi
						fi
					fi
				done
				unset DISPLAYED
			elif [ ! -e packages/$package/dependencies ]; then
				echo "Not Found $package dependency!!"
			fi
		done
		rm packages.list
		if [ -e packages.added ]; then
			mv packages.added packages.list
		fi
	done
	rm -f packages.list
}

package_module_dependencies()
{
	# Adding additional modules which are dependencies of packages
	echo -e "\nAdding $KERNVER module dependencies on other packages"
	(ls ./kernel/dependencies_package/ ) |
	while read name; do
		(cat ./kernel/dependencies_package/$name ) |
		while read module; do
			if [ -e $PACDIR/$name.package ]; then
				if [ -z "`find ./tmp-tree/lib/modules/$KERNVER -name ${module}.ko`" ]; then
					echo "Package : $name   Module: $module"
					if copy_module ${module}.ko $KERNVER ./tmp-tree; then
						touch /tmp/dirty
					else
						echo "Could not find $KERNVER module $module"
					fi
				fi
			elif [ -e $PACDIR/$name.pkg ]; then
				if [ -z "`find $PKGDIR/$name/lib/modules/$KERNVER -name ${module}.ko`" ]; then
					echo "Pkg     : $name   Module: $module"
					if copy_module ${module}.ko $KERNVER $PKGDIR/$name; then
						touch /tmp/dirty
					else
						echo "Could not find $KERNVER module $module"
					fi
				fi
			fi
		done
	done
}

get_file ()
{
    URL=$1
    filetype=`echo $1 | cut -d: -f1`
    filepath=`echo $1 | cut -d: -f2`
    if [ -n "$3" ] ; then
	outfile=$3
    else
	outfile=`basename $URL`
    fi

    case `make_caps $filetype` in
    HTTP|HTTPS|FTP|FTPS)
	if [ -e $PACDIR/downloads.param ] ; then
            . $PACDIR/downloads.param
	fi
	if [ -n "$ts_downloads" ] && [ -e "$ts_downloads/$outfile" ]; then
	    cp $ts_downloads/$outfile $2/$outfile
	else
	echo -e "\nDownloading from Net....."
        if [ ! -z "$ts_httpproxy" ] ; then
            echo "Using proxy $http_proxy"
		if ! wget -t 1 -N $URL -O $2/$outfile -e http_proxy=$ts_httpproxy $ts_wgetopts ; then
	                if ! wget -t 1 -N $URL -O $2/$outfile -e http_proxy=$ts_httpproxy $ts_wgetopts ; then
        	                echo -e "\nError has occured downloading file"
                	        echo -e "Build Aborted\n"
                        	remove_files
	                        exit 1
        	        fi
		fi
        else
            echo "Using system proxy, or not using any proxy to connect to Internet."
                if ! wget -t 1 -N $URL -O $2/$outfile $ts_wgetopts ; then
			if ! wget -t 1 -N $URL -O $2/$outfile $ts_wgetopts ; then
	                        echo -e "\nError has occured downloading file"
        	                echo -e "Build Aborted\n"
                	        remove_files
                        	exit 1
			fi
                fi
        fi
	if [ -n "$ts_downloads" ]; then
	    cp $2/$outfile $ts_downloads/$outfile
	fi
	fi
    ;;
    FILE)
	if ! cp $filepath $2/$3 ; then
	    echo -e "\nError has occured copying file"
	    echo -e "Build Aborted\n"
	    remove_files
	    exit 1
	fi
    ;;
    NONE)
	 echo blah >/dev/null
    ;;
    *)
	echo -e "\nCan't determine installation type, should be http(s): or ftp(s) or file:"
	echo -e "Build Aborted\n"
	remove_files
	exit 1
    ;;
    esac
}

web_package ()
{
    URL=$1
    package=$2
    filename=`make_caps $2`

    if [ -e ./packages/$package ] ; then
      if [ -e $PACDIR/httpproxy.param ] ; then
        . $PACDIR/httpproxy.param
      fi
      echo -e "\nINSTALLING $filename"
      if [ -n "$AUTODL" ] ; then
        CHOICE="Y"
      else
	echo -e "$filename is not installed, we need to setup binary file."
        echo -e "This only needs to be done once.\n"
        echo "Continue? (Y/N)"
        read CHOICE
        CHOICE=`make_caps $CHOICE`
      fi

      if [ "$CHOICE" = "Y" ] ; then
 	mkdir ./wget_tmp
	get_file $URL ./wget_tmp
	if ./packages/$package/build/install $URL ; then
	  touch ./packages/$package/build/installed
	  echo -e "$package: Setup Complete"
	else
	  echo -e "\nError has occured while installing package $package"
       	  echo -e "Build Aborted\n"
	  remove_files
	  exit 1
	fi
	rm -Rf ./wget_tmp
      fi
    else
	  echo "Error has occured"
	  echo "$package does not exist in packages directory"
          echo -e "Build Aborted\n"
	  remove_files
          exit 1
    fi
}

## Add boot splash image
splash_resize()
{
	mkdir -p $TOOLSDIR/splash/$ts_boottheme/$res
	if [ -e $TOOLSDIR/splash/$ts_boottheme/scalable ]; then
		if [ -z "$SPLASH_BG_COLOR" ]; then
			SPLASH_BG_COLOR=black
		fi
		$TOOLSDIR/splash/bin/splash_resize ./utils/tools/splash $ts_boottheme scalable 1024x768 $res
		rsvg-convert $TOOLSDIR/splash/$ts_boottheme/scalable/silent.svg \
			-w `echo $res |cut -d "x" -f1` \
			-h `echo $res |cut -d "x" -f2` \
			-a -o tmp.png
		convert -background $SPLASH_BG_COLOR tmp.png \
			-define png:color-type=2 \
			-resize $res \
			-gravity center \
			-extent $res \
			+repage $TOOLSDIR/splash/$ts_boottheme/$res/silent.png
		rm tmp.png
        else
		$TOOLSDIR/splash/bin/splash_resize ./utils/tools/splash $ts_boottheme 1024x768 1024x768 $res
		convert -size 1024x768 \
			$TOOLSDIR/splash/$ts_boottheme/1024x768/silent.jpg \
			-resize $res\! $TOOLSDIR/splash/$ts_boottheme/$res/silent.jpg
        fi
}

splash_setup()
{
if [ -z "$ts_bootresolution" ] ; then
	ts_bootresolution=800x600-32
fi
if [ -n "$ts_bootresolution" ] ;then
        uvesafb="mode_option=\"$ts_bootresolution\""
	screenres=`echo "$ts_bootresolution" |cut -d "-" -f 1`
	screenbpp=`echo "$ts_bootresolution" |cut -d "-" -f 2`
	echo "PREFERED_RES=$ts_bootresolution" |cut -d '-' -f1 >> ./tmp-tree/etc/thinstation.defaults
        if [ ! -z "$ts_fbmtrr" ] ;then
	        uvesafb="$uvesafb mtrr=$ts_fbmtrr"
        fi
        if [ `make_caps X"$ts_fbnocrtc"` == "XTRUE" ] ;then
	        uvesafb="$uvesafb nocrtc=1"
        fi
	if [ `make_caps X"$ts_fbnoedid"` == "XTRUE" ] ; then
		uvesafb="$uvesafb noedid=1"
	fi
	if [ ! -z "$ts_fbvtotal" ] ; then
		uvesafb="$uvesafb vram_total=$ts_fbvtotal"
	fi
	if [ ! -z "$ts_fbmaxhf" ] ; then
		uvesafb="$uvesafb maxhf=$ts_fbmaxhf"
	fi
	if [ ! -z "$ts_fbmaxvf" ] ; then
                uvesafb="$uvesafb maxvf=$ts_fbmaxvf"
        fi
	if [ ! -z "$ts_fbmaxclk" ] ; then
                uvesafb="$uvesafb maxclk=$ts_fbmaxclk"
        fi
        if [ ! -z "$ts_fbsm" ] ;then
	        uvesafb="$uvesafb scroll=$ts_fbsm"
        fi
	if [ "$ts_uvesafb" == "disable" ]; then
		KERNEL_PARAMETERS="$KERNEL_PARAMETERS uvesafb=off"
	fi
	mkdir -p ./tmp-tree/etc/modprobe.d
	echo "options uvesafb $uvesafb" > ./tmp-tree/etc/modprobe.d/uvesafb.conf
	if [ ! -z $ts_extra_vid ]; then
		KERNEL_PARAMETERS="$KERNEL_PARAMETERS video=$ts_extra_vid"
	fi
  if is_enabled $ts_bootlogo && [ -e ./tmp-tree/bin/fbsplashd ]; then
	splashvar="splash=silent"
	if [ -n "$ts_splash" ] ; then splashvar="splash=$ts_splash" ; fi
	if [ -n "$ts_boottheme" ] ; then splashvar="$splashvar,theme:$ts_boottheme" ; fi
	if [ -n "$ts_silenttty" ] ; then splashvar="$splashvar,tty:$ts_silenttty" ; fi
	KERNEL_PARAMETERS="$KERNEL_PARAMETERS $splashvar"
	echo -e "+ Adding splash boot logo\n"
	res=${ts_bootresolution%-*}
	echo $res
	if [ ! -e $TOOLSDIR/splash/$ts_boottheme/$res/$res.cfg ] ; then
		splash_resize
	fi
	mkdir -p ./tmp-tree/etc/splash/$ts_boottheme
	cp -Prfd $TOOLSDIR/splash/$ts_boottheme/$res ./tmp-tree/etc/splash/$ts_boottheme
	if is_enabled $ts_allres; then
		for res in 640x480 800x600 1024x600 1024x768 1152x864 1280x720 1280x768 1280x800 1280x960 1280x1024 1366x768 1400x1050 1440x900 1600x900 1600x1200 1680x1050 1920x1080 1920x1200 2880x1800; do
			if [ ! -e $TOOLSDIR/splash/$ts_boottheme/$res/$res.cfg ] ; then
				splash_resize
			fi
			if [ ! -e ./tmp-tree/etc/splash/$ts_boottheme/$res/$res.cfg ]; then
				mkdir -p ./tmp-tree/etc/splash/$ts_boottheme
				cp -Prfd $TOOLSDIR/splash/$ts_boottheme/$res ./tmp-tree/etc/splash/$ts_boottheme
			fi
		done
	fi
	for res in `ls --color=never ./tmp-tree/etc/splash/$ts_boottheme |grep -v "\.ttf"`; do
		mv ./tmp-tree/etc/splash/$ts_boottheme/$res/$res.cfg ./tmp-tree/etc/splash/$ts_boottheme/.
	done
  else
		rm -rf ./tmp-tree/etc/splash
		rm -rf ./tmp-tree/lib/splash
		KERNEL_PARAMETERS="$KERNEL_PARAMETERS splash=off"
  fi
fi
}

write_locale()
{
        echo "locale: $name"
        localedef -i $inputfile -f $charmap $name --prefix=./tmp-tree
}

sample_configuration()
{
	# Building Sample Thinstation.conf file
	echo -e "\nBuilding Sample Thinstation.conf File\n"

	mkdir -p ./tmp-tree/conf
	echo > ./thinstation.conf.sample
	for filename in `find $PKGDIR -maxdepth 1 -name "*" && echo "./tmp-tree"`; do
		if [ -e $filename/build/conf ] ; then
			cp $filename/build/conf/* ./tmp-tree/conf
		fi
	done
	for filename in `ls ./tmp-tree/conf | sort`; do
		cat ./tmp-tree/conf/$filename >> ./thinstation.conf.sample
	done
}

locales()
{
	echo -e "\nAdding locales to archive.\n"
	# Removes extended locale libs if not selected
	if [ -n "`find ./tmp-tree/build -maxdepth 1 -name \*.template`" ]; then
		for localedef in `cat ./tmp-tree/build/*.template`; do
			inputfile=`echo $localedef|cut -d , -f1`
			charmap=`echo $localedef|cut -d , -f2`
			name=`echo $localedef|cut -d , -f3`
		        if ! is_enabled $ts_fulllocales; then
				if [ "$charmap" == "UTF-8" ]; then
					write_locale
				fi
			else
				write_locale
			fi
		done
	fi
}

allfirm()
{
	if is_enabled $ts_allfirmware; then
		unset firmlist
		module=`find /lib/modules/$KERNVER -name $1`
		firmlist=`modinfo -F firmware $module`
		if [ -n "$firmlist" ]; then
			echo "Adding extra module firmware for `basename $module`"
			for firmware in $firmlist; do
				copy_firmware `basename $firmware`
			done
		fi
	fi
}

keymaps()
{
#
    for filename in `find $PACDIR -maxdepth 1 -name "keymaps-*"`
    do
	package=`basename $filename`
	keymap=${package%%.*}
	if [ -n "$xkeymap" ] ; then
	    xkeymap=$xkeymap,${keymap##*-}
	else
	    xkeymap=${keymap##*-}
	fi
    done
    echo "XKEYBOARD=$xkeymap" >> ./tmp-tree/etc/thinstation.defaults


# Removes uneeded keymap package types
# Also places the keymap components in the correct package

echo -e "\nChecking if extended locale support is enabled\n"

for packagename in x-common base rdesktop blackbox ica_wfc
do
	if [ -e $PACDIR/$packagename.pkg ]; then
	   for filename in `find $PKGDIR -maxdepth 1 -name "keymaps-*" && echo "./tmp-tree"`
	   do
	       if [ -e $filename/$packagename ] ; then
		 echo "Coping extended $packagename to pkg file"
	         cp -Rp $filename/$packagename/* $PKGDIR/$packagename
	         rm -R $filename/$packagename
               fi
           done
	elif [ -e $PACDIR/$packagename.package ] ; then
	   for filename in `find $PKGDIR -maxdepth 1 -name "keymaps-*" && echo "./tmp-tree"`
	   do
	       if [ -e $filename/$packagename ] ; then
		 echo "Coping extended $packagename to inbuilt image"
	         cp -Rp $filename/$packagename/* ./tmp-tree
	         rm -R $filename/$packagename
               fi
           done
	else
	   for filename in `find $PKGDIR -maxdepth 1 -name "keymaps-*" && echo "./tmp-tree"`
	   do
	       if [ -e $filename/$packagename ] ; then
	         rm -R $filename/$packagename
	       fi
           done
	fi
done

# Checks for and removes any remaining keymap.pkg files
# It does this as keymaps are merged into there parent files

for filename in `find $PKGDIR -maxdepth 1 -name "keymaps-*"`
do
	rm -R $filename
	keymapname=`basename $filename`
	rm $PACDIR/$keymapname.pkg
done
}

copy_firmware()
{
	if [ -n "$2" ]; then
		firmfiles=`find -L /lib/firmware/ -name $1\* | grep $2`
	else
		firmfiles=`find -L /lib/firmware/ -name $1\*`
	fi
	if [ -n "$firmfiles" ]; then
		for firmfile in $firmfiles; do
			firmpath=./tmp-tree/lib/firmware/`echo $firmfile |cut -d '/' -f4-`
			if [ ! -e $firmpath ]; then
				echo "Firmware: `basename $firmfile`"
				if [ ! -d ${firmpath%/*} ] ;then
					mkdir -p ${firmpath%/*}
				fi
				cp $firmfile ${firmpath%/*}/.
			fi
		done
	else
		echo -e "\tNotice, Firmware $1 not found"
#		echo "$1" >> /missing
	fi
}

read_conf()
{
if [ -z "$1" ] ;
	then CONF_FILE=$CONFIG_FILE
	else CONF_FILE=$1
fi
(cat $CONF_FILE; echo) | # make sure there is a LF at the end
while read type name args
do
    type=`echo $type | sed -e s///g | sed -e 's/\&/\\\&/g'`
    name=`echo $name | sed -e s///g | sed -e 's/\&/\\\&/g'`
    args=`echo $args | sed -e s///g | sed -e 's/\&/\\\&/g'`
    case $type in
    \#*|"") continue
	    ;;
    param)
	echo "Parameter: $name"
	echo "ts_$name=$args" >> $PACDIR/$name.param
	;;
    package)
	echo "Package: $name"
	if [ -d ./packages/$name ]; then
	   echo "cp -Rp --remove-destination ./packages/$name/* ./tmp-tree > /dev/null 2>&1">>\
	     $PACDIR/$name.package
	else
	   echo "Not Found $name!!"
	fi
	;;
    machine)
	read_conf ./machine/$name/module.list
	if [ -e ./machine/$name/firmware.list ]; then
		read_conf ./machine/$name/firmware.list
	fi
	if [ -e ./machine/$name/param.list ]; then
		read_conf ./machine/$name/param.list
	fi
	if [ -e ./machine/$name/package.list ]; then
		read_conf ./machine/$name/package.list
	fi
	if [ -e ./machine/$name/etc ]; then
		cp -rf ./machine/$name/etc ./tmp-tree/.
	fi
	;;
    module)
	if ! is_enabled $ALLMODULES; then
		if [ -e ./kernel/alias/$name ] ; then
			name=`cat ./kernel/alias/$name`
		fi
		for KERNVER in $KERNVERS; do
		        if [ -e `find /lib/modules/$KERNVER -name ${name}.ko` ] ; then
				echo "Module $KERNVER: $name"
				copy_module ${name}.ko $KERNVER ./tmp-tree
			else
				echo "Error, Module $name not found"
			fi
		done
	fi
	if [ `make_caps X$args` == "XFORCE" ]; then
		echo $name `echo $args | cut -f1 -d#` >> ./tmp-tree/etc/modules
	fi
